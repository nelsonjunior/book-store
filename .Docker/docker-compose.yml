version: "3"

services:
  exchange-db:
    image: mysql
    container_name: exchange-db
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - "3306:3306"
    networks:
      - local-dev
    restart: on-failure
    environment:
#      MYSQL_DATABASE: "exchange"
      MYSQL_USER: "exchange"
      MYSQL_PASSWORD: "exchange"
      MYSQL_ROOT_PASSWORD : "root"
    volumes:
      - ./volumes/exchange-db:/var/lib/mysql
      - ./init/init-exchange.sql:/docker-entrypoint-initdb.d/init.sql
  book-db:
    image: mysql
    container_name: book-db
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - "3307:3306"
    networks:
      - local-dev
    restart: on-failure
    environment:
#      MYSQL_DATABASE: "book"
      MYSQL_USER: "book"
      MYSQL_PASSWORD: "book"
      MYSQL_ROOT_PASSWORD: "root"
    volumes:
      - ./volumes/book-db:/var/lib/mysql
      - ./init/init-book.sql:/docker-entrypoint-initdb.d/init.sql

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks:
      - broker-kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    networks:
      - broker-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    networks:
      - broker-kafka
    depends_on:
      - kafka
    ports:
      - "19000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:29092

  redis:
    container_name: sbs_redis
    image: redis:6.2.3
    ports:
      - "6380:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - local-dev

  zipkin:
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - local-dev

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.1.1
    environment:
      - xpack.security.enabled=false
      - "discovery.type=single-node"
    networks:
      - es-net
    ports:
      - "9200:9200"

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.1.1
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - es-net
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"

  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:8.1.1
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: -Xmx256m -Xms256m
    networks:
      - es-net
    depends_on:
      - elasticsearch

networks:
  local-dev:
    driver: bridge
  es-net:
    driver: bridge
  broker-kafka:
    driver: bridge